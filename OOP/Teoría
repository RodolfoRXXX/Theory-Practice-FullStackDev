Paradigma de Objetos

- Qué es un paradigma?
  Un paradigma es un acuerdo entre partes de cómo van a ser los bloques de construcción de un programa. Es un marco de trabajo.
  En nuestro caso, utilizamos el paradigma de objetos.

- Qué es el paradigma de objetos?
  Este paradigma de programación, también llamado POO (Programación Orientada a Objetos) se basa en el concepto de que código y datos están encapsulados en una sola entidad llamada "clase".
  Estas clases están conformadas por datos(atributos) y funciones(métodos) que determinan su funcionamiento.
  Para utilizar estas pequeñas fracciones de código es necesario instanciar estas clases y generar objetos.

- Características de la POO
  > Abstracción. La modularización de la POO se lleva a cabo gracias a unir propiedades y comportamientos en entidades que permitan modelar el programa, la abstracción posibilita eso;
  > Encapsulamiento. Reunir entidades en el mismo nivel de abstracción;
  > Ppio. de Ocultación. Permite ocultar los datos y cómo funciona una entidad por dentro, solo permitiendo que el exterior vea lo que el programador desea y así también cómo entregar los datos;
  > Polimorfismo. Es la posibilidad de redefinir propiedades o métodos de otros objetos sin que sea necesario volverlos a crear con otro nombre, solo dependiendo del objeto desde el que se los implemente;
  > Herencia. Es la capacidad de extender las funcionalidades de un objeto para hacerlo menos general y más específico al problema que se quiera resolver;
  > UML. Es un lenguaje de modelado de clases y objetos. Este lenguaje permite definir comportamientos, límites y propiedades de cada entidad que se utilice para el programa y su interacción entre ellas;


Si la POO se maneja en términos de clases y objetos, entonces
Qué es una clase?
  Una clase es una abstracción de una porción de un problema a resolver que tiene atributos y métodos para resolverlo. Esta entidad se utiliza como plano para generar objetos.

Qué es un objeto?
  Es el resultado de implementar una clase. Los objetos se crean para resolver una parte de un problema utilizando sus métodos y atributos y compartiendo con otros objetos estos resultados en forma de mensajes.

Cómo se define una clase?
  Una clase se define con la palabra reservada "class" seguida del nombre de la clase en mayúscula y de un conjunto de corchetes que encapsulan a los elementos de la clase.
  En PHP una clase se define así:

      class Persona {
  
        # Atributos
          $nombre;
          $apellido;
          $edad;
  
        # Constructor
          public function __construct($nombre=NULL, $apellido=NULL, $edad=NULL){
              if ($nombre != NULL) $this->setNombre($nombre);
              if ($apellido != NULL) $this->setApellido($apellido);
              if ($edad != NULL) $this->setEdad($edad);
          }
  
        # Métodos
          public function setNombre($nombre){
              $this->$nombre = $nombre;
          }
          public function setApellido($apellido){
              $this->$apellido = $apellido;
          }
          public function setEdad($edad){
              $this->$edad = $edad;
          }
  
      }

  En esta clase podemos ver la definición de atributos y de métodos, como así también la definición de un constructor que es llamado cuando se utiliza la palabra "new" en el código, esto genera la 
  instanciación de la clase en un nuevo objeto.
  Este constructor se utiliza, además de para crear al objeto, también para definir sus atributos.

A qué hace referencia la Herencia de clases?
  La Herencia de clases sirve para hacer el código más conciso y no repetitivo. Cuando una clase extiende de otra, la clase "Hija" toma los atributos y métodos de la clase "Padre" sin necesidad de definirlos y
  puede hacer uso de ellos o modificar su funcionamiento.
  También se utiliza como un árbol conceptual de niveles de abstracción, donde las clases que heredan de otras, se vuelven más particulares al modelo.

Cómo redefinimos métodos?
  Cuando se usa la herencia de clases, la clase que hereda puede redefinir los métodos que desee, con el fin de agregarles funcionalidad o simplemente cambiarla. Así el funcionamiento de éste método queda 
  determinado por el objeto desde el que se llama, siendo diferente para el padre como para el hijo.

Para qué sirve el operador parent::?
  En la herencia de clases, el operador "parent::" se utiliza para llamar a algún método o atributo de la clase padre.

Qué son las clases abstractas?
  Las clases abstractas son clases que no pueden ser instanciadas. Generalmente estas clases son extendidas por otras más particulares que redefinen sus métodos y pueden ser instanciadas.

Qué son los namespaces?
  Los namespaces son tipos de sintáxis que se utilizan en las clases para distinguírlas de otras que se llamen igual.
  Al encapsular a una clase en una cláusula de tipo namespace, lo que hacemos es separarla de otras similares.

  Ej.
      namespace ecommerce{
        class Persona{
        
        }
      }

  De forma que al utilizar esta clase debemos invocarla de la siguiente manera:

  require class/Persona.class.php;
  require vendor/class/Persona.class.php;

  use \ecommerce\Persona as PersonaEcommerce;

  # Forma 1 sin use
    $personaEcommerce = \ecommerce\Persona();

  # Forma 2 con use
  $personaEcommerce = new PersonaEcommerce();

Cómo capturar excepciones?
  Para evitar errores que puedan detener nuestro código debemos atrapar las excepciones y para ello utilizamos el bloque try/catch.
  Ej.
      try{

          //código a ejecutar

      } catch(Exception $e){

          echo "Se ha detectado el siguiente error: {$e->getMessage()}";

      }

  En este caso, si alguna excepción es generada en el bloque "try", el bloque "catch" la atrapará y entregará el error, pero la aplicación no se detendrá de forma abrupta.

Qué son los modificadores de visibilidad?
  Estos son palabras dedicadas al lenguaje que permiten definir el nivel de acceso de atributos o métodos de una clase.
  Existen tres tipos: public, private y protected.

  Si el atributo o método tiene el siguiente modificador de visibilidad tiene las siguientes restricciones:
    public: sin restricciones, es accesible tanto desde afuera de la clase como desde adentro y desde las clases que extiendan de ella.
    private: solo accesibles desde la clase donde se definió, no desde la clase que la hereda.
    protected: es como private pero es accesible desde la clase que la hereda.

  Como regla general, los atributos deben ser privados y los métodos públicos. Debería evitarse el modificador protected y acceder a los atributos a través de setters y getters.

